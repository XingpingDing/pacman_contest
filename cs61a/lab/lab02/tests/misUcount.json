{"countData": {"prntstrwithquotes-printstring": 5, "lambdamisidentifyrtnval-sloppy": 3, "mismatchargnoerr": 2, "assignstmtrtnval": 3, "varevalisemptyval": 1, "sloppynoreadinstructions-sloppy": 2, "assignstmtrtnval-assignment": 3, "prntrtnsprntedval": 1, "prntstrwithquotes": 5, "sloppynoreadinstructions": 2, "lambdadefevalatdef": 2, "lambdadefevalatdef-lambdadefine": 2, "prntrtnsprntedval-printreturnvalue": 1, "mismatchargnoerr-evalfncall": 2, "lambdamisidentifyrtnval": 3, "lambdamisidentifyrtnval-lambdacallexpr": 3, "varevalisemptyval-evalvar": 1}, "answerDict": {">>> t = lambda f: lambda x: f(f(f(x)))\n>>> s = lambda x: x + 1\n>>> t(s)(0)\n3\n>>> bar = lambda y: lambda x: pow(x, y)\n>>> bar()(15)\nLOCKED_ANSWER\n>>> foo = lambda: 32\n>>> foobar = lambda x, y: x // y\n>>> a = lambda x: foobar(foo(), bar(4)(x))\n>>> a(2)\nLOCKED_ANSWER\n>>> b = lambda x, y: print('summer')\nLOCKED_ANSWER\n>>> c = b(4, 'dog')\nLOCKED_ANSWER\n>>> print(c)\nLOCKED_ANSWER\n": ["['0']", "['1']"], ">>> def first(x):\n...     x += 8\n...     def second(y):\n...         print('second')\n...         return x + y\n...     print('first')\n...     return second\n>>> f = first(15)\nfirst\n>>> f\nLOCKED_ANSWER\n>>> f(16)\nLOCKED_ANSWER\nLOCKED_ANSWER\n": ["['None']"], ">>> lambda x: x\nLOCKED_ANSWER\n>>> a = lambda x: x\n>>> a(5)\nLOCKED_ANSWER\n>>> b = lambda: 3\n>>> b()\nLOCKED_ANSWER\n>>> c = lambda x: lambda: print('123')\n>>> c(88)\nLOCKED_ANSWER\n>>> c(88)()\nLOCKED_ANSWER\n>>> d = lambda f: f(4)\n>>> def square(x):\n...     return x * x\n>>> d(square)\nLOCKED_ANSWER\n": ["['x']", "['none']", "['None']", "['']", "['25']", "['5']", "['<function <lambda> at 0x1071534d0>']"], ">>> t = lambda f: lambda x: f(f(f(x)))\n>>> s = lambda x: x + 1\n>>> t(s)(0)\n3\n>>> bar = lambda y: lambda x: pow(x, y)\n>>> bar()(15)\nError\n>>> foo = lambda: 32\n>>> foobar = lambda x, y: x // y\n>>> a = lambda x: foobar(foo(), bar(4)(x))\n>>> a(2)\n2\n>>> b = lambda x, y: print('summer')\nNothing\n>>> c = b(4, 'dog')\nsummer\n>>> print(c)\nLOCKED_ANSWER\n": ["['summer']"], ">>> lambda x: x\nFunction\n>>> a = lambda x: x\n>>> a(5)\n5\n>>> b = lambda: 3\n>>> b()\n3\n>>> c = lambda x: lambda: print('123')\n>>> c(88)\nLOCKED_ANSWER\n>>> c(88)()\nLOCKED_ANSWER\n>>> d = lambda f: f(4)\n>>> def square(x):\n...     return x * x\n>>> d(square)\nLOCKED_ANSWER\n": ["[\"'123'\"]", "['123']"], ">>> t = lambda f: lambda x: f(f(f(x)))\n>>> s = lambda x: x + 1\n>>> t(s)(0)\n3\n>>> bar = lambda y: lambda x: pow(x, y)\n>>> bar()(15)\nError\n>>> foo = lambda: 32\n>>> foobar = lambda x, y: x // y\n>>> a = lambda x: foobar(foo(), bar(4)(x))\n>>> a(2)\n2\n>>> b = lambda x, y: print('summer')\nLOCKED_ANSWER\n>>> c = b(4, 'dog')\nLOCKED_ANSWER\n>>> print(c)\nLOCKED_ANSWER\n": ["[\"'summer'\"]", "['Error']", "['None']", "['']", "['b()']", "['b()()']", "['b(1,2)']", "['b(1)(2)']", "['b(3,2)']", "['b(0,0)']", "['b(1,1)']", "[\"b(1,'dog')\"]", "['c = b(1,2)']", "[\"b('dog','cat')\"]", "['b(8,2)']", "['Function']"], ">>> lambda x: x\nFunction\n>>> a = lambda x: x\n>>> a(5)\n5\n>>> b = lambda: 3\n>>> b()\n3\n>>> c = lambda x: lambda: print('123')\n>>> c(88)\nFunction\n>>> c(88)()\nLOCKED_ANSWER\n>>> d = lambda f: f(4)\n>>> def square(x):\n...     return x * x\n>>> d(square)\nLOCKED_ANSWER\n": ["[\"'123'\"]"], ">>> def first(x):\n...     x += 8\n...     def second(y):\n...         print('second')\n...         return x + y\n...     print('first')\n...     return second\n>>> f = first(15)\nfirst\n>>> f\nFunction\n>>> f(16)\nLOCKED_ANSWER\nLOCKED_ANSWER\n": ["['second', 'first']"]}}